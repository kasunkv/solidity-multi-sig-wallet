/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface WalletInterface extends utils.Interface {
  functions: {
    "approveTransfer(uint256)": FunctionFragment;
    "deposit()": FunctionFragment;
    "requestTransfer(address,uint256)": FunctionFragment;
    "requestedTransfers(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestTransfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestedTransfers",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestedTransfers",
    data: BytesLike
  ): Result;

  events: {
    "DepositCompleted(address,uint256)": EventFragment;
    "OwnershipAssigned(address[3])": EventFragment;
    "TransderRequestApproved(uint256,address)": EventFragment;
    "TransderRequestCompleted(uint256,uint256,address)": EventFragment;
    "TransferRequestCreated(uint256,uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipAssigned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransderRequestApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransderRequestCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferRequestCreated"): EventFragment;
}

export type DepositCompletedEvent = TypedEvent<
  [string, BigNumber],
  { from: string; amount: BigNumber }
>;

export type DepositCompletedEventFilter =
  TypedEventFilter<DepositCompletedEvent>;

export type OwnershipAssignedEvent = TypedEvent<
  [[string, string, string]],
  { owners: [string, string, string] }
>;

export type OwnershipAssignedEventFilter =
  TypedEventFilter<OwnershipAssignedEvent>;

export type TransderRequestApprovedEvent = TypedEvent<
  [BigNumber, string],
  { txId: BigNumber; approver: string }
>;

export type TransderRequestApprovedEventFilter =
  TypedEventFilter<TransderRequestApprovedEvent>;

export type TransderRequestCompletedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { txId: BigNumber; amount: BigNumber; recipient: string }
>;

export type TransderRequestCompletedEventFilter =
  TypedEventFilter<TransderRequestCompletedEvent>;

export type TransferRequestCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, string, string],
  { txId: BigNumber; amount: BigNumber; recipient: string; requestedBy: string }
>;

export type TransferRequestCreatedEventFilter =
  TypedEventFilter<TransferRequestCreatedEvent>;

export interface Wallet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WalletInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveTransfer(
      _txId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestTransfer(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestedTransfers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, number] & {
        txId: BigNumber;
        amount: BigNumber;
        recipient: string;
        requestedBy: string;
        approvals: number;
      }
    >;
  };

  approveTransfer(
    _txId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestTransfer(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestedTransfers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, number] & {
      txId: BigNumber;
      amount: BigNumber;
      recipient: string;
      requestedBy: string;
      approvals: number;
    }
  >;

  callStatic: {
    approveTransfer(
      _txId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(overrides?: CallOverrides): Promise<void>;

    requestTransfer(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestedTransfers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, number] & {
        txId: BigNumber;
        amount: BigNumber;
        recipient: string;
        requestedBy: string;
        approvals: number;
      }
    >;
  };

  filters: {
    "DepositCompleted(address,uint256)"(
      from?: null,
      amount?: null
    ): DepositCompletedEventFilter;
    DepositCompleted(from?: null, amount?: null): DepositCompletedEventFilter;

    "OwnershipAssigned(address[3])"(
      owners?: [string, string, string] | null
    ): OwnershipAssignedEventFilter;
    OwnershipAssigned(
      owners?: [string, string, string] | null
    ): OwnershipAssignedEventFilter;

    "TransderRequestApproved(uint256,address)"(
      txId?: null,
      approver?: null
    ): TransderRequestApprovedEventFilter;
    TransderRequestApproved(
      txId?: null,
      approver?: null
    ): TransderRequestApprovedEventFilter;

    "TransderRequestCompleted(uint256,uint256,address)"(
      txId?: null,
      amount?: null,
      recipient?: null
    ): TransderRequestCompletedEventFilter;
    TransderRequestCompleted(
      txId?: null,
      amount?: null,
      recipient?: null
    ): TransderRequestCompletedEventFilter;

    "TransferRequestCreated(uint256,uint256,address,address)"(
      txId?: null,
      amount?: null,
      recipient?: null,
      requestedBy?: null
    ): TransferRequestCreatedEventFilter;
    TransferRequestCreated(
      txId?: null,
      amount?: null,
      recipient?: null,
      requestedBy?: null
    ): TransferRequestCreatedEventFilter;
  };

  estimateGas: {
    approveTransfer(
      _txId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestTransfer(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestedTransfers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveTransfer(
      _txId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestTransfer(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestedTransfers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
